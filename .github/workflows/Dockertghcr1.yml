name: 构建并推送 Docker 镜像

on:
  workflow_dispatch:  # 允许手动触发
    inputs:
      image_name:
        description: '镜像名称 (例如: my-app)'
        required: true
      tag:
        description: '镜像标签 (默认: latest)'
        default: 'latest'
      target_arch:
        description: '目标架构 (逗号分隔: amd64, arm64, arm/v7)'
        default: 'amd64'

env:
  REGISTRY: ghcr.io  # GitHub 容器注册表

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 获取代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤 2: 设置跨平台构建环境
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 3: 登录到 GHCR
      - name: 登录 GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}  # 自动使用当前用户
          password: ${{ secrets.GITHUB_TOKEN }}  # 自动使用 GitHub Token

      # 步骤 4: 解析架构参数
      - name: 解析目标架构
        id: parse-arch
        run: |
          # 将用户输入转换为 Docker 平台格式
          ARCH_INPUT="${{ inputs.target_arch }}"
          PLATFORMS=""
          
          for arch in $(echo $ARCH_INPUT | tr ',' ' '); do
            case $arch in
              amd64)   PLATFORMS+="linux/amd64," ;;
              arm64)   PLATFORMS+="linux/arm64," ;;
              arm/v7)  PLATFORMS+="linux/arm/v7," ;;
              *)       echo " 不支持的架构: $arch" && exit 1 ;;
            esac
          done
          
          # 移除末尾逗号
          PLATFORMS=${PLATFORMS%?}
          echo "PLATFORMS=${PLATFORMS}" >> $GITHUB_OUTPUT
        shell: bash

      # 步骤 5: 构建并推送镜像
      - name: 构建和推送
        uses: docker/build-push-action@v5
        with:
          context: .  # Dockerfile 所在目录
          platforms: ${{ steps.parse-arch.outputs.PLATFORMS }}
          push: true  # 自动推送镜像
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:${{ inputs.tag }}
